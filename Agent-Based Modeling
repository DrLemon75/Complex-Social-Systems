# Here is a basic Python program that sets up an Agent-Based Modeling (ABM) simulation where individual agents interact within a social system
# In this program, we create a basic Agent class representing individual agents with opinions. 
# Each agent can interact with another agent by adjusting their opinion based on the influence of the other agent. 
# The simulation allows you to observe emergent behavior as agents interact within the social system. 
# You can further expand this model by adding additional features, behaviors, and analysis mechanisms based on your specific requirements.

import random

class Agent:
    def __init__(self, id):
        self.id = id
        self.opinion = random.uniform(0, 1)
    
    def interact(self, other_agent):
        influence = other_agent.opinion - self.opinion
        self.opinion += influence * 0.1  # Adjust opinion based on influence

# Initialize agents
num_agents = 100
agents = [Agent(i) for i in range(num_agents)]

# Simulate interactions between agents
num_iterations = 50
for _ in range(num_iterations):
    for agent in agents:
        other_agent = random.choice(agents)  # Select a random agent to interact with
        agent.interact(other_agent)

# Analyze emergent behavior, opinion distribution, etc.

for agent in agents:
    print(f"Agent {agent.id}: Opinion {agent.opinion}")
